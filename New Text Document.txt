import React, { useState, useEffect } from 'react';
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  TextField,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Grid,
  Typography,
  IconButton,
  Box,
  Checkbox,
  FormControlLabel,
  Divider,
  Paper,
  Alert,
  styled
} from '@mui/material';
import { Close, Add, ChevronRight } from '@mui/icons-material';

// Styled Components
const StyledDialog = styled(Dialog)(({ theme }) => ({
  '& .MuiDialog-paper': {
    width: '95vw',
    height: '95vh',
  },
  '& .MuiDialogContent-root': {
    padding: theme.spacing(2),
  },
  '& .MuiDialogActions-root': {
    padding: theme.spacing(1),
  },
}));

const RedDialogTitle = styled(DialogTitle)(({ theme }) => ({
  backgroundColor: '#504848ff',
  color: 'white',
  padding: '12px 16px',
  display: 'flex',
  justifyContent: 'space-between',
  alignItems: 'center',
  '& .MuiTypography-root': {
    fontSize: '16px',
    fontWeight: 500,
  }
}));

const RedButton = styled(Button)(({ theme }) => ({
  backgroundColor: '#c62828',
  color: 'white',
  '&:hover': {
    backgroundColor: '#b71c1c',
  }
}));


// Main Modal Component
const CreateMinionSolutionModal = ({ open, onClose, initialId = null, rowData }) => {
  const [formData, setFormData] = useState({
    solutionName: '',
    sectionType: 'Modfication',
    requestedYear: 'None',
    primaryRationale: 'None',
    porYear: "None",
    coverageAcquisition: '3022',
    siteList: 'Associate ENode6',
    useOffloadProvision: true,
    overrideSpectrum: false,
    upsftProjectType: 'UPDATE TO VALID RATIONAL',
    fuzeFileId: '5059543',
    fuzeFileType: 'SMALL CELL',
    carrierAdd5G: false,
    carrierAdd5G2: false,
    fourTX: false,
    fddImd: false,
    optmChange: 'None selected',
    sspt: 'None selected',
    comments: []
  });

  const [options, setOptions] = useState({
    sectionTypeList: [{ value: "1", label: "Modfication" }],
    requestedYearsList: [{ value: "1", label: "2025" }],
    primaryRationaleList: [{ value: "1", label: "Modfication" }],
    porYearList: [{ value: "1", label: "2025" }]
  });

  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  useEffect(() => {
    if (open) {
      loadInitialData();
    }
    if (initialId && open) {
      loadSolutionData(initialId);
    }
  }, [initialId, open]);

  const loadInitialData = async () => {
    setLoading(true);
    try {
      // Load all dropdown options from API
      const [
        sectionTypesRes,
        requestedYearsRes,
        primaryRationaleRes,
        porYearRes
      ] = await Promise.all([
        fetch('/api/minion-solutions/options/section-types'),
        fetch('/api/minion-solutions/options/section-types'),
        fetch('/api/minion-solutions/options/section-types'),
        fetch('/api/minion-solutions/options/section-types'),
      ]);

      const [
        sectionTypeList,
        requestedYearsList,
        primaryRationaleList,
        porYearList
      ] = await Promise.all([
        sectionTypesRes.json(),
        requestedYearsRes.json(),
        primaryRationaleRes.json(),
        porYearRes.json(),
      ]);

      setOptions({
        sectionTypeList,
        requestedYearsList,
        primaryRationaleList,
        porYearList
      });
    } catch (err) {
      console.error('Error loading options:', err);
    } finally {
      setLoading(false);
    }
  };

  const loadSolutionData = async (id) => {
    setLoading(true);
    try {
      const response = await fetch(`/api/minion-solutions/${id}`);
      const data = await response.json();
      setFormData(data);
    } catch (err) {
      setError('Failed to load solution data');
    } finally {
      setLoading(false);
    }
  };

  const handleInputChange = (field) => (event) => {
    const value = event.target.type === 'checkbox' ? event.target.checked : event.target.value;
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));

    if (['sectionType', 'requestedYear', 'fuzeFileType'].includes(field)) {
      handleSelectChange(field, value);
    }
  };

  const handleSelectChange = async (field, value) => {
    try {
      const response = await fetch(`/api/minion-solutions/options/${field}?value=${value}`);
      const options = await response.json();
      console.log(`${field} changed:`, value);
    } catch (err) {
      console.error('Failed to fetch dependent options:', err);
    }
  };

  const handleSave = async () => {
    setLoading(true);
    setError('');
    try {
      const method = initialId ? 'PUT' : 'POST';
      const url = initialId ? `/api/minion-solutions/${initialId}` : '/api/minion-solutions';

      const response = await fetch(url, {
        method,
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(formData)
      });

      if (response.ok) {
        onClose();
      } else {
        throw new Error('Failed to save solution');
      }
    } catch (err) {
      setError('Failed to save solution');
    } finally {
      setLoading(false);
    }
  };

  const handleValidate = async () => {
    setLoading(true);
    try {
      const response = await fetch('/api/minion-solutions/validate', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(formData)
      });

      const result = await response.json();
      if (result.valid) {
        alert('Validation successful!');
      } else {
        setError(result.message || 'Validation failed');
      }
    } catch (err) {
      setError('Validation failed');
    } finally {
      setLoading(false);
    }
  };


  const HeaderSection = ({ formData, onChange }) => (
    <Box component="section" sx={{ p: 2, }}>
      <Grid container spacing={2}>
        <Grid item size={3}>
          <TextField id="outlined-basic" label="Solution Name *" value={formData.solutionName}
            onChange={onChange('solutionName')} size="small" fullWidth variant="outlined" />
        </Grid>

        <Grid item size={3}>
          <FormControl fullWidth>
            <InputLabel>Section Type *</InputLabel>
            <Select
              value={formData.sectionType}
              onChange={onChange('sectionType')}
              label="Section Type *"
              size="small"
            >
              {options.sectionTypeList.map((option) => (
                <MenuItem key={option.value} value={option.value}>
                  {option.label}
                </MenuItem>
              ))}
            </Select>
          </FormControl>
        </Grid>

        <Grid item size={3}>
          <FormControl fullWidth>
            <InputLabel>Requested Years *</InputLabel>
            <Select
              value={formData.requestedYear}
              onChange={onChange('requestedYear')}
              label="Requested Years *"
              size="small"
            >
              {options.requestedYearsList.map((option) => (
                <MenuItem key={option.value} value={option.value}>
                  {option.label}
                </MenuItem>
              ))}
            </Select>
          </FormControl>
        </Grid>

        <Grid item size={3}>
          <Box sx={{ mb: 2 }}>
            <FormControlLabel
              control={
                <Checkbox
                  checked={formData.useOffloadProvision}
                  onChange={onChange('useOffloadProvision')}
                  disabled={loading}
                  size="small"
                />
              }
              label="Use Offload Provision"
              sx={{ mr: 3, '& .MuiFormControlLabel-label': { fontSize: '14px' } }}
            />
            <FormControlLabel
              control={
                <Checkbox
                  checked={formData.overrideSpectrum}
                  onChange={onChange('overrideSpectrum')}
                  disabled={loading}
                  size="small"
                />
              }
              label="Override Spectrum"
              sx={{ '& .MuiFormControlLabel-label': { fontSize: '14px' } }}
            />
          </Box>
        </Grid>
      </Grid>

    </Box>
  );

  const SecondSection = ({ formData, onChange }) => (
    <Box component="section" sx={{ p: 2, }}>
      <Grid container spacing={2}>
        <Grid item size={3}>
          <FormControl fullWidth>
            <InputLabel>Primary Rationale *</InputLabel>
            <Select
              value={formData.primaryRationale}
              onChange={onChange('primaryRationale')}
              label="Primary Rationale *"
              size="small"
            >
              {options.primaryRationaleList.map((option) => (
                <MenuItem key={option.value} value={option.value}>
                  {option.label}
                </MenuItem>
              ))}
            </Select>
          </FormControl>
        </Grid>

        <Grid item size={3}>
          <FormControl fullWidth>
            <InputLabel>POR Year *</InputLabel>
            <Select
              value={formData.porYear}
              onChange={onChange('porYear')}
              label="POR Year *"
              size="small"
            >
              {options.porYearList.map((option) => (
                <MenuItem key={option.value} value={option.value}>
                  {option.label}
                </MenuItem>
              ))}
            </Select>
          </FormControl>
        </Grid>
        <Grid item xs={12} md={3}>
          <RedButton
            variant="contained"
            size="small"
            fullWidth
            endIcon={<ChevronRight />}
          >
            Fuze Sync Pull
          </RedButton>
        </Grid>
      </Grid>

    </Box>
  );

//   const ThirdSection = ({ formData, onChange }) => (
//     <Box component="section" sx={{ p: 2, }}>
//       <Grid container spacing={2}>
//         <Grid item size={3}>
//           <TextField disabled={true} label="InFlight ParentId *" value={rowData.InFlightParentId}
//             size="small" fullWidth variant="outlined" />
//         </Grid>

// {formData?.overrideSpectrum && <Grid item size={3}>
//           <TextField   onChange={onChange('primaryRationale')} label="InFlight ParentId *" value={rowData.InFlightParentId}
//             size="small" fullWidth variant="outlined" />
//         </Grid>}


//         <Grid item size={formData?.overrideSpectrum?2:3}>
//           <TextField disabled={true} label="UneFi ProjectType*" value={rowData.uneFiProjectType}
//             size="small" fullWidth variant="outlined" />
//         </Grid>

//            <Grid item size={formData?.overrideSpectrum?2:3}>
//           <TextField disabled={true} label="Fuze SiteId*" value={rowData.FuzeSiteId}
//             size="small" fullWidth variant="outlined" />
//         </Grid>
//            <Grid item size={formData?.overrideSpectrum?2:3}>
//           <TextField disabled={true} label="Fuze SiteType*" value={rowData.FuzeSiteType}
//             size="small" fullWidth variant="outlined" />
//         </Grid>

//       </Grid>

//     </Box>
//   );

  const ThirdSection = ({ formData, onChange }) => {
  const isOverrideSpectrum = formData?.overrideSpectrum;
  const gridSize = isOverrideSpectrum ? 2 : 3;
  
  // Field configuration for easier maintenance
  const fields = [
    {
      id: 'inflightParentId',
      label: 'InFlight ParentId *',
      value: rowData.InFlightParentId,
      disabled: true,
      size: 3
    },
    ...(isOverrideSpectrum ? [{
      id: 'primaryRationale',
      label: 'Primary Rationale *', // Fixed label (was duplicate)
      value: formData.primaryRationale || '',
      disabled: false,
      size: 3,
      onChange: onChange('primaryRationale')
    }] : []),
    {
      id: 'uneFiProjectType',
      label: 'UneFi ProjectType *',
      value: rowData.uneFiProjectType,
      disabled: true,
      size: gridSize
    },
    {
      id: 'fuzeSiteId',
      label: 'Fuze SiteId',
      value: rowData.FuzeSiteId,
      disabled: true,
      size: gridSize
    },
    {
      id: 'fuzeSiteType',
      label: 'Fuze SiteType',
      value: rowData.FuzeSiteType,
      disabled: true,
      size: gridSize
    }
  ];

  return (
    <Box component="section" sx={{ p: 2 }}>
      <Grid container spacing={2}>
        {fields.map(({ id, label, value, disabled, size, onChange: fieldOnChange }) => (
          <Grid item size={size} key={id}>
            <TextField
              label={label}
              value={value}
              disabled={disabled}
              onChange={fieldOnChange}
              size="small"
              fullWidth
              variant="outlined"
            />
          </Grid>
        ))}
      </Grid>
    </Box>
  );
};

//   const ThirdSectionMemo = ({ formData, onChange }) => {
//   const fieldConfig = useMemo(() => {
//     const isOverrideSpectrum = formData?.overrideSpectrum;
//     const gridSize = isOverrideSpectrum ? 2 : 3;
    
//     return [
//       {
//         id: 'inflightParentId',
//         label: 'InFlight ParentId *',
//         value: rowData.InFlightParentId,
//         disabled: true,
//         size: 3
//       },
//       ...(isOverrideSpectrum ? [{
//         id: 'primaryRationale',
//         label: 'Primary Rationale *',
//         value: formData.primaryRationale || '',
//         disabled: false,
//         size: 3,
//         onChange: onChange('primaryRationale')
//       }] : []),
//       {
//         id: 'uneFiProjectType',
//         label: 'UneFi ProjectType *',
//         value: rowData.uneFiProjectType,
//         disabled: true,
//         size: gridSize
//       },
//       {
//         id: 'fuzeSiteId',
//         label: 'Fuze SiteId',
//         value: rowData.FuzeSiteId,
//         disabled: true,
//         size: gridSize
//       },
//       {
//         id: 'fuzeSiteType',
//         label: 'Fuze SiteType',
//         value: rowData.FuzeSiteType,
//         disabled: true,
//         size: gridSize
//       }
//     ];
//   }, [formData?.overrideSpectrum, formData.primaryRationale, onChange]);

//   return (
//     <Box component="section" sx={{ p: 2 }}>
//       <Grid container spacing={2}>
//         {fieldConfig.map(({ id, label, value, disabled, size, onChange: fieldOnChange }) => (
//           <Grid item size={size} key={id}>
//             <TextField
//               label={label}
//               value={value}
//               disabled={disabled}
//               onChange={fieldOnChange}
//               size="small"
//               fullWidth
//               variant="outlined"
//             />
//           </Grid>
//         ))}
//       </Grid>
//     </Box>
//   );
// };
  return (
    <StyledDialog
      open={open}
      onClose={onClose}
      maxWidth={false}
      fullWidth
    >
      <RedDialogTitle>
        <Typography variant="h6">Create Minion Solution</Typography>
        <IconButton onClick={onClose} sx={{ color: 'white', '&:hover': { backgroundColor: 'rgba(255,255,255,0.1)' } }}>
          <Close />
        </IconButton>
      </RedDialogTitle>

      <DialogContent >
        <HeaderSection formData={formData} onChange={handleInputChange} />
        <SecondSection formData={formData} onChange={handleInputChange} />
        <ThirdSection formData={formData} onChange={handleInputChange} />
      </DialogContent>
    </StyledDialog>
  );
};


// Demo Component
const App = () => {
  const [modalOpen, setModalOpen] = useState(false);
  const [selectedId, setSelectedId] = useState(null);

  const handleOpenModal = (id = null) => {
    setSelectedId(id);
    setModalOpen(true);
  };

  const handleCloseModal = () => {
    setModalOpen(false);
    setSelectedId(null);
  };

  return (
    <Box sx={{ p: 3, fontFamily: 'Roboto, Arial, sans-serif' }}>
      <Typography variant="h4" gutterBottom sx={{ color: '#424242', mb: 3 }}>
        Minion Solution Management
      </Typography>


      <Box sx={{ display: 'flex', gap: 2, mb: 3 }}>
        <Button
          variant="contained"
          color="primary"
          onClick={() => handleOpenModal()}
        >
          Create New Solution
        </Button>
        <Button
          variant="outlined"
          color="primary"
          onClick={() => handleOpenModal('12345')}
        >
          Edit Solution (ID: 12345)
        </Button>
      </Box>

      <CreateMinionSolutionModal
        open={modalOpen}
        onClose={handleCloseModal}
        initialId={selectedId}
        rowData={{ InFlightParentId: "data", InFlightParentId2: "data", uneFiProjectType: "data", FuzeSiteId: "data", FuzeSiteType: "data" }}
      />
    </Box>
  );
};

export default App;
